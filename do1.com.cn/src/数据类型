# 两大数据类型
 1. 内置数据类型
 2. 引用数据类型
 ----
## 内置数据类型
* boolean 布尔
* byte 字节
  * ``包装类：java.lang.Byte``
  *  byte 数据类型是8位、有符号的，以二进制补码表示的整数；
  *  最小值是 -128（-2^7）；
  *  最大值是 127（2^7-1）；
  *  默认值是 0；
  *  byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一
* char 字符
  * ``包装类：java.lang.Character``
  * char类型是一个单一的 16 位 Unicode 字符；
  * 最小值是 \u0000（即为0）；
  * 最大值是 \uffff（即为65,535）；
  * char 数据类型可以储存任何字符；
  * 例子：char letter = 'A';。
* double 双精度
  * ``包装类：java.lang.Double``
* float 单精度类型
  * ``包装类：java.lang.Float``
  * float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；
  * float 在储存大型浮点数组的时候可节省内存空间；
  * 默认值是 0.0f；
  * 浮点数不能用来表示精确的值，如货币；
* int 整型
  * ``包装类：java.lang.Integer``
  * int 数据类型是32位、有符号的以二进制补码表示的整数；
  * 最小值是 -2,147,483,648（-2^31）；
  * 最大值是 2,147,483,647（2^31 - 1）；
  * 一般地整型变量默认为 int 类型；
  * 默认值是 0 
* long 长整型
  * ``包装类：java.lang.Long``
  * 64位
* short 短整型
  * ``包装类：java.lang.Short``
  * short 数据类型是 16 位、有符号的以二进制补码表示的整数
  * 最小值是 -32768（-2^15）；
  * 最大值是 32767（2^15 - 1）；
  * Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；
  * 默认值是 0；
 ----
 
## 引用数据类型
  *  对象数组
  *  默认都为null
  * 一个引用变量可以用来引用任何与之兼容的类型。
  ----
  
## 常量
 * 在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：
 * final double PI = 3.1415927;
  -----
  
## 数据转换
 * 优先级：byte,short,char—> int —> long—> float —> double 
 * 数据类型转换必须满足如下规则：
    1. 不能对boolean类型进行类型转换。
    2. 不能把对象类型转换成不相关类的对象。
    3. 在把容量大的类型转换为容量小的类型时必须使用强制类型转换。
    4. 转换过程中可能导致溢出或损失精度，例如：
    ```
    int i =128;   
    byte b = (byte)i;
    // byte最大127，所以精度丢失
    ```
-----
 ## 自动类型转换
   * 必须满足转换前的数据类型的位数要低于转换后的数据类型，
   例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，
   同样float数据类型的位数为32，可以自动转换为64位的double类型。